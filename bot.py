
import os
import time
import threading
import urllib.request
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import socketserver
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from collections import defaultdict
import sys
import psutil
import requests
import threading


def keep_alive_ping():
    """–ü–∏–Ω–≥—É–µ—Ç —Å–µ–±—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–Ω—É—Ç—å"""
    while True:
        try:
            # –ü–∏–Ω–≥—É–µ–º —Å–≤–æ–π –∂–µ —Ö–æ—Å—Ç–∏–Ω–≥
            response = requests.get('https://your-bot-name.onrender.com/health', timeout=30)
            print(f"üîÑ Keep-alive ping: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Keep-alive failed: {e}")

        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç
        time.sleep(600)


# –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_keep_alive():
    ping_thread = threading.Thread(target=keep_alive_ping, daemon=True)
    ping_thread.start()


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

cold_start = True


def handle_cold_start():
    global cold_start
    if cold_start:
        print("üî• Cold start - bot was sleeping")
        cold_start = False
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        try:
            if OWNER_ID:
                bot.send_message(OWNER_ID, "ü§ñ –ë–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–Ω–∞")
        except:
            pass


# –ü—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading


class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            if self.path == '/health' or self.path == '/':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'OK')
                print(f"‚úÖ Health check: {self.path}")
            else:
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Telegram Bot is running!')
                print(f"‚úÖ Request: {self.path}")

        except Exception as e:
            print(f"‚ùå HTTP error: {e}")
            self.send_error(500, f"Server error: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HEAD –∑–∞–ø—Ä–æ—Å–æ–≤
    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, HEAD, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.end_headers()

    # –£–ø—Ä–æ—â–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    def log_message(self, format, *args):
        print(f"üåê HTTP: {self.address_string()} - {self.command} {self.path}")


def run_http_server():
    port = 5000
    try:
        server = HTTPServer(('0.0.0.0', port), HealthHandler)
        print(f"üåê HTTP server running on port {port}")
        server.serve_forever()
    except Exception as e:
        print(f"‚ùå HTTP server crashed: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(5)
        run_http_server()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7613324655:AAH-yS_7o96AjkSsp97W5o0kmT10geG6z6A"

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
moderators_chat_id = -1003005577058
moderators = set()
user_messages = {}
waiting_for_moderators_chat = False

# –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞
user_message_timestamps = defaultdict(list)
MAX_MESSAGES_PER_MINUTE = 20

# ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
OWNER_ID = 5492264667  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª—É–¥–∞
def check_flood(user_id):
    now = time.time()
    user_message_timestamps[user_id] = [t for t in user_message_timestamps[user_id] if now - t < 60]

    if len(user_message_timestamps[user_id]) >= MAX_MESSAGES_PER_MINUTE:
        return False

    user_message_timestamps[user_id].append(now)
    return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
def create_reply_keyboard(user_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã refresh
def refresh_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="refresh_mods"))
    return keyboard


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —á–∞—Ç–∞
def update_moderators_from_chat():
    global moderators
    if not moderators_chat_id:
        return False

    try:
        chat_admins = bot.get_chat_administrators(moderators_chat_id)
        moderators.clear()

        for admin in chat_admins:
            if not admin.user.is_bot:
                moderators.add(admin.user.id)

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators}")
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
def is_moderator(user_id):
    return user_id in moderators or user_id == OWNER_ID


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        bot.send_message(message.chat.id,
                         "üëã –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/setup - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n/refresh - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    elif moderators_chat_id and message.chat.id == moderators_chat_id:
        if update_moderators_from_chat():
            bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! –í–∞—à–∏ –ø—Ä–∞–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
    else:
        bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup
@bot.message_handler(commands=['setup'])
def setup_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        global waiting_for_moderators_chat
        waiting_for_moderators_chat = True
        bot.send_message(message.chat.id,
                         "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!) –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /refresh
@bot.message_handler(commands=['refresh'])
def refresh_command(message):
    handle_cold_start()
    if is_moderator(message.from_user.id):
        if update_moderators_from_chat():
            bot.send_message(message.chat.id, f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
@bot.message_handler(commands=['stats'])
def stats_command(message):
    handle_cold_start()
    if message.from_user.id == OWNER_ID:
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        stats_text += f"‚Ä¢ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {moderators_chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        stats_text += f"‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_message_timestamps)}\n"
        bot.send_message(message.chat.id, stats_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    handle_cold_start()
    global waiting_for_moderators_chat

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return

    if waiting_for_moderators_chat:
        setup_moderators_chat(message)
        return

    if message.from_user.id == OWNER_ID:
        handle_owner_message(message)
    elif moderators_chat_id and message.chat.id == moderators_chat_id:
        handle_moderator_chat_message(message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥
        if not check_flood(message.from_user.id):
            bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        forward_to_moderators_chat(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['photo', 'document', 'video', 'audio', 'voice', 'sticker'])
def handle_media(message):
    handle_cold_start()
    if moderators_chat_id and message.chat.id == moderators_chat_id:
        handle_moderator_chat_message(message)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª—É–¥
        if not check_flood(message.from_user.id):
            bot.send_message(message.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        forward_to_moderators_chat(message)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
def setup_moderators_chat(message):
    global moderators_chat_id, waiting_for_moderators_chat

    if message.forward_from_chat:
        moderators_chat_id = message.forward_from_chat.id
        waiting_for_moderators_chat = False

        if update_moderators_from_chat():
            bot.send_message(message.chat.id,
                             f"‚úÖ –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ID: {moderators_chat_id}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}")
            bot.send_message(moderators_chat_id,
                             "‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Ç–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! –í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id,
                             "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.")

    elif message.chat.type in ['group', 'supergroup']:
        moderators_chat_id = message.chat.id
        waiting_for_moderators_chat = False

        if update_moderators_from_chat():
            bot.send_message(message.chat.id,
                             f"‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! ID: {moderators_chat_id}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(moderators)}",
                             reply_markup=refresh_keyboard())
        else:
            bot.send_message(message.chat.id,
                             "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.")

    else:
        bot.send_message(message.chat.id,
                         "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.")


# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
def forward_to_moderators_chat(message):
    if not moderators_chat_id:
        bot.send_message(message.chat.id, "‚ùå –ß–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not moderators and not OWNER_ID:
        bot.send_message(message.chat.id, "‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    if message.from_user.username:
        user_name += f" (@{message.from_user.username})"

    try:
        if message.content_type == 'text':
            sent_message = bot.send_message(
                moderators_chat_id,
                f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}):\n\n{message.text}",
                reply_markup=create_reply_keyboard(user_id)
            )
        else:
            caption = f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id})"
            if message.caption:
                caption += f":\n\n{message.caption}"

            if message.content_type == 'photo':
                sent_message = bot.send_photo(
                    moderators_chat_id,
                    message.photo[-1].file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'document':
                sent_message = bot.send_document(
                    moderators_chat_id,
                    message.document.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'video':
                sent_message = bot.send_video(
                    moderators_chat_id,
                    message.video.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'audio':
                sent_message = bot.send_audio(
                    moderators_chat_id,
                    message.audio.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'voice':
                sent_message = bot.send_voice(
                    moderators_chat_id,
                    message.voice.file_id,
                    caption=caption,
                    reply_markup=create_reply_keyboard(user_id)
                )
            elif message.content_type == 'sticker':
                sent_message = bot.send_sticker(
                    moderators_chat_id,
                    message.sticker.file_id
                )
                bot.send_message(
                    moderators_chat_id,
                    f"üë§ –°—Ç–∏–∫–µ—Ä –æ—Ç {user_name} (ID: {user_id})",
                    reply_markup=create_reply_keyboard(user_id)
                )

        user_messages[sent_message.message_id] = user_id
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
def handle_moderator_chat_message(message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    if message.text and (message.text.startswith('/') or message.text in ["–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"]):
        return

    if not is_moderator(message.from_user.id):
        bot.send_message(message.chat.id,
                         "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.reply_to_message:
        reply_to_msg_id = message.reply_to_message.message_id
        if reply_to_msg_id in user_messages:
            user_id = user_messages[reply_to_msg_id]
            try:
                if message.content_type == 'text':
                    bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
                else:
                    if message.content_type == 'photo':
                        bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption)
                    elif message.content_type == 'document':
                        bot.send_document(user_id, message.document.file_id, caption=message.caption)
                    elif message.content_type == 'video':
                        bot.send_video(user_id, message.video.file_id, caption=message.caption)
                    elif message.content_type == 'audio':
                        bot.send_audio(user_id, message.audio.file_id, caption=message.caption)
                    elif message.content_type == 'voice':
                        bot.send_voice(user_id, message.voice.file_id)
                    elif message.content_type == 'sticker':
                        bot.send_sticker(user_id, message.sticker.file_id)

                bot.send_message(moderators_chat_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

            except Exception as e:
                bot.send_message(moderators_chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞
def handle_owner_message(message):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return

    if message.text == "–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤":
        if update_moderators_from_chat():
            bot.send_message(message.chat.id, f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {len(moderators)}")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    if call.data.startswith('reply_'):
        user_id = int(call.data.split('_')[1])
        bot.answer_callback_query(call.id,
                                  "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    elif call.data == "refresh_mods":
        if is_moderator(call.from_user.id):
            if update_moderators_from_chat():
                bot.answer_callback_query(call.id, "‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                bot.edit_message_text(f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ–≥–æ: {len(moderators)}",
                                      call.message.chat.id, call.message.message_id,
                                      reply_markup=refresh_keyboard())
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        else:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
@bot.message_handler(content_types=['new_chat_members'])
def handle_new_members(message):
    handle_cold_start()
    if message.chat.id == moderators_chat_id:
        for new_member in message.new_chat_members:
            if not new_member.is_bot:
                bot.send_message(moderators_chat_id,
                                 f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.first_name}! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É.")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤
def check_bot_instances():
    try:
        import psutil
        current_pid = os.getpid()
        bot_processes = []

        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if (proc.info['pid'] != current_pid and
                        'python' in proc.info['name'].lower() and
                        any('bot.py' in cmd for cmd in proc.info['cmdline'] or [])):
                    bot_processes.append(proc)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue

        return bot_processes
    except ImportError:
        print("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return []


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    http_thread = threading.Thread(target=run_http_server, daemon=True)
    http_thread.start()
    print("üöÄ Starting HTTP server on port 5000...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–ø–∏–Ω–≥
    start_keep_alive()
    print("üîÑ Keep-alive service started...")

    time.sleep(3)

    try:
        bot.remove_webhook()
        time.sleep(2)

        print("ü§ñ Starting Telegram bot...")
        bot.infinity_polling(
            allowed_updates=['message', 'callback_query'],
            timeout=90,
            long_polling_timeout=90,
            skip_pending=True
        )
    except Exception as e:
        print(f"‚ùå Bot startup failed: {e}")
        print("üîÑ Restarting in 10 seconds...")
        time.sleep(10)
        os.execv(sys.executable, ['python'] + sys.argv)